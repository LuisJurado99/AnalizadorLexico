/* The following code was generated by JFlex 1.6.1 */

package AnalizadorL;
import java.io.StringReader;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>c:/Users/Gonzalo/workspace/AnalizadorLexicoTC/src/dlince/lenguaje.lex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\44\1\56\1\56\1\56\22\0\1\27\1\0\1\1"+
    "\2\0\1\55\1\54\1\43\1\37\1\37\1\55\1\55\1\41\1\36"+
    "\1\51\1\34\1\47\11\50\1\42\1\40\1\35\1\53\1\52\2\0"+
    "\1\17\1\15\1\6\1\22\1\13\1\31\1\25\1\26\1\7\2\45"+
    "\1\20\1\24\1\5\1\10\1\11\1\45\1\12\1\14\1\21\1\3"+
    "\1\30\1\45\1\16\1\45\1\23\1\32\1\0\1\33\1\55\1\46"+
    "\1\0\1\17\1\15\1\6\1\22\1\13\1\2\1\25\1\26\1\7"+
    "\2\45\1\20\1\24\1\5\1\10\1\11\1\45\1\12\1\14\1\21"+
    "\1\3\2\45\1\16\1\45\1\23\1\0\1\4\1\0\1\54\6\0"+
    "\1\56\u1fa2\0\1\56\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\1\3\13\2\1\4\2\3\1\5"+
    "\1\6\1\7\1\10\1\7\1\11\1\12\1\13\1\14"+
    "\1\1\2\15\2\10\1\16\1\7\1\0\1\17\4\2"+
    "\1\20\1\21\1\20\1\22\14\2\2\20\4\2\2\22"+
    "\4\2\2\21\11\2\1\23\1\24\2\0\6\2\1\25"+
    "\1\26\2\2\1\25\2\2\1\27\5\2\1\0\5\2"+
    "\1\30\1\2\1\30\3\2\2\26\4\2\2\31\4\2"+
    "\1\25\2\26\1\2\1\26\1\27\1\31\1\2\1\32"+
    "\1\33\13\2\1\34\1\35\1\2\1\36\1\37\1\2"+
    "\1\34\1\40\1\2\1\0\2\41\3\2\1\34\1\2"+
    "\1\34\2\35\1\42\1\43\1\37\2\2\2\36\1\2"+
    "\1\0\2\41\1\2\1\42\1\35\2\40\1\2\1\41"+
    "\4\2\2\44\4\2\2\44\1\2\2\44\1\2\1\45"+
    "\1\46\1\45\1\47\1\44\1\50\3\2\1\47\1\2"+
    "\1\50\1\2\1\50\1\2\1\0\1\50\1\2\1\47"+
    "\1\0\1\44\1\2\1\45\1\47\33\2\2\0\4\2"+
    "\1\51\2\2\2\51\1\2\1\52\1\51\2\2\2\52"+
    "\1\53\1\51\1\2\1\54\1\2\1\55\1\54\2\2"+
    "\1\53\1\51\1\55\1\54\2\0\1\55\1\2\1\53"+
    "\2\2\2\56\3\2\1\57\1\2\1\57\1\60\1\57"+
    "\1\60\1\57\1\61\1\0\1\56\6\2\2\62\1\0"+
    "\1\2\2\63\1\64\1\2\1\0\1\65\1\0\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\57\0\274\0\215\0\57\0\57\0\u031f\0\u034e"+
    "\0\u037d\0\57\0\57\0\57\0\57\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\57\0\57\0\57\0\136\0\57\0\u0468\0\u0497"+
    "\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f"+
    "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0468\0\u0814\0\u0843\0\u0553\0\u0872"+
    "\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u0582\0\u095d\0\u098c\0\u0468"+
    "\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\57\0\57\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0b91"+
    "\0\u0d67\0\u0d96\0\u0b91\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81"+
    "\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u0b91\0\u1028\0\u1057\0\u1086\0\u10b5\0\u0b91\0\u10e4\0\u1113"+
    "\0\u1142\0\u1171\0\u11a0\0\u0b91\0\u11cf\0\u11fe\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u12e9\0\u0e81\0\u1318\0\u0c7c\0\u1347"+
    "\0\57\0\u0b62\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u151d\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u1461\0\u1376\0\u1666\0\u1695\0\u1403"+
    "\0\u1376\0\u16c4\0\u1608\0\u16f3\0\u1722\0\u1722\0\u1376\0\u1666"+
    "\0\u1376\0\u1376\0\u1376\0\u1376\0\u1751\0\u1780\0\u17af\0\u1376"+
    "\0\u17af\0\u17de\0\u180d\0\u14bf\0\u183c\0\u186b\0\u1608\0\u16f3"+
    "\0\u1722\0\u189a\0\u154c\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985"+
    "\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a12\0\u18f8\0\u1a9f"+
    "\0\u1ace\0\u1a9f\0\u1afd\0\u18f8\0\u18f8\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1cd3"+
    "\0\u18f8\0\u1d02\0\u1d31\0\u1ca4\0\u1c75\0\u18f8\0\u1d60\0\u1d8f"+
    "\0\u1bb9\0\u1c46\0\u1afd\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a"+
    "\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2"+
    "\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a"+
    "\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2"+
    "\0\u2311\0\u2340\0\u236f\0\u239e\0\u239e\0\u23cd\0\u23fc\0\u242b"+
    "\0\u245a\0\u2489\0\u239e\0\u24b8\0\u24b8\0\u245a\0\u24b8\0\u242b"+
    "\0\u239e\0\u24e7\0\u2516\0\u239e\0\u2545\0\u239e\0\u2574\0\u2574"+
    "\0\u25a3\0\u25d2\0\u2601\0\u24b8\0\u23fc\0\u2630\0\u265f\0\u268e"+
    "\0\u26bd\0\u2574\0\u26ec\0\u271b\0\u26ec\0\u274a\0\u2779\0\u27a8"+
    "\0\u27d7\0\u2806\0\u2835\0\u26ec\0\u26ec\0\u2835\0\u2835\0\u27a8"+
    "\0\57\0\u2864\0\u2806\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f"+
    "\0\u297e\0\u28f1\0\u2893\0\u29ad\0\57\0\57\0\u29dc\0\57"+
    "\0\u29dc\0\u2a0b\0\57\0\u2a3a\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\2\5"+
    "\1\10\1\11\1\12\1\13\2\5\1\14\1\15\1\16"+
    "\1\17\1\5\1\20\1\5\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\22\1\5\1\2\1\37\1\40\1\2"+
    "\1\41\1\42\1\43\1\44\60\0\1\45\1\46\55\45"+
    "\2\0\1\47\1\50\1\51\2\47\1\52\17\47\1\0"+
    "\2\47\13\0\4\47\10\0\25\47\1\0\2\47\13\0"+
    "\4\47\10\0\1\47\1\50\1\53\1\54\1\55\1\56"+
    "\1\57\1\47\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\47\1\66\1\47\1\67\3\47\1\0\2\47\13\0"+
    "\4\47\10\0\2\47\1\57\3\47\1\57\16\47\1\0"+
    "\2\47\13\0\4\47\10\0\2\47\1\70\5\47\1\71"+
    "\4\47\1\72\7\47\1\0\2\47\13\0\4\47\10\0"+
    "\2\47\1\73\1\47\1\74\4\47\1\75\13\47\1\0"+
    "\2\47\13\0\4\47\10\0\2\47\1\76\1\77\6\47"+
    "\1\100\1\47\1\64\10\47\1\0\2\47\13\0\4\47"+
    "\10\0\2\47\1\101\2\47\1\102\3\47\1\103\13\47"+
    "\1\0\2\47\13\0\4\47\10\0\2\47\1\104\1\47"+
    "\1\105\5\47\1\106\1\63\3\47\1\66\1\47\1\67"+
    "\3\47\1\0\2\47\13\0\4\47\10\0\2\47\1\107"+
    "\1\110\5\47\1\111\13\47\1\0\2\47\13\0\4\47"+
    "\10\0\2\47\1\112\5\47\1\113\4\47\1\114\7\47"+
    "\1\0\2\47\13\0\4\47\10\0\2\47\1\115\2\47"+
    "\1\116\3\47\1\117\13\47\1\0\2\47\13\0\4\47"+
    "\10\0\2\47\1\120\2\47\1\120\17\47\1\0\2\47"+
    "\13\0\4\47\10\0\2\47\1\121\12\47\1\121\7\47"+
    "\1\0\2\47\13\0\4\47\42\0\1\122\60\0\1\123"+
    "\14\0\1\42\53\0\1\40\6\0\43\124\1\0\13\124"+
    "\51\0\1\125\54\0\2\40\61\0\1\42\5\0\25\126"+
    "\1\0\2\126\13\0\4\126\10\0\2\126\2\127\21\126"+
    "\1\0\2\126\13\0\4\126\10\0\2\126\2\130\21\126"+
    "\1\0\2\126\13\0\4\126\10\0\2\126\2\131\21\126"+
    "\1\0\2\126\13\0\4\126\10\0\1\132\1\133\1\134"+
    "\1\135\1\136\1\126\1\137\1\140\1\141\1\142\1\143"+
    "\2\126\1\144\1\126\1\145\1\146\1\126\1\147\1\150"+
    "\1\126\1\151\1\126\1\132\13\0\4\126\10\0\2\126"+
    "\1\145\14\126\1\145\5\126\1\0\2\126\13\0\4\126"+
    "\10\0\2\126\1\152\3\126\1\152\16\126\1\0\2\126"+
    "\13\0\4\126\10\0\2\126\1\153\1\154\5\126\1\155"+
    "\10\126\1\156\2\126\1\0\2\126\13\0\4\126\10\0"+
    "\2\126\1\157\1\160\6\126\1\161\7\126\1\162\2\126"+
    "\1\0\2\126\13\0\4\126\10\0\1\126\1\133\1\163"+
    "\3\126\1\164\16\126\1\0\2\126\13\0\4\126\10\0"+
    "\1\132\1\126\1\165\1\166\5\126\1\167\6\126\1\146"+
    "\2\126\1\150\1\126\1\151\1\126\1\132\13\0\4\126"+
    "\10\0\2\126\1\170\1\126\1\171\4\126\1\172\13\126"+
    "\1\0\2\126\13\0\4\126\10\0\2\126\1\143\7\126"+
    "\1\143\12\126\1\0\2\126\13\0\4\126\10\0\2\126"+
    "\1\140\4\126\1\140\15\126\1\0\2\126\13\0\4\126"+
    "\10\0\2\126\1\173\1\174\1\175\3\126\1\141\14\126"+
    "\1\0\2\126\13\0\4\126\10\0\2\126\1\176\12\126"+
    "\1\176\7\126\1\0\2\126\13\0\4\126\10\0\2\126"+
    "\1\177\12\126\1\177\7\126\1\0\2\126\13\0\4\126"+
    "\10\0\2\126\1\200\3\126\1\164\1\126\1\141\14\126"+
    "\1\0\2\126\13\0\4\126\10\0\2\126\1\164\3\126"+
    "\1\164\16\126\1\0\2\126\13\0\4\126\10\0\2\126"+
    "\1\141\5\126\1\141\14\126\1\0\2\126\13\0\4\126"+
    "\10\0\2\126\1\146\15\126\1\146\4\126\1\0\2\126"+
    "\13\0\4\126\10\0\2\126\1\201\1\126\1\171\2\126"+
    "\1\140\7\126\1\145\5\126\1\0\2\126\13\0\4\126"+
    "\10\0\2\126\1\171\1\126\1\171\20\126\1\0\2\126"+
    "\13\0\4\126\10\0\2\126\1\202\1\203\17\126\1\150"+
    "\1\126\1\0\2\126\13\0\4\126\10\0\2\126\2\204"+
    "\21\126\1\0\2\126\13\0\4\126\10\0\2\126\1\205"+
    "\1\166\17\126\1\150\1\126\1\0\2\126\13\0\4\126"+
    "\10\0\2\126\1\206\3\126\1\152\2\126\1\172\1\143"+
    "\2\126\1\144\7\126\1\0\2\126\13\0\4\126\10\0"+
    "\2\126\1\172\6\126\1\172\13\126\1\0\2\126\13\0"+
    "\4\126\10\0\2\126\1\167\6\126\1\167\13\126\1\0"+
    "\2\126\13\0\4\126\10\0\1\126\1\133\1\207\1\174"+
    "\21\126\1\0\2\126\13\0\4\126\10\0\1\126\2\133"+
    "\22\126\1\0\2\126\13\0\4\126\10\0\2\126\2\174"+
    "\21\126\1\0\2\126\13\0\4\126\10\0\1\132\1\126"+
    "\1\210\17\126\1\156\2\126\1\151\1\126\1\132\13\0"+
    "\4\126\10\0\2\126\1\156\17\126\1\156\2\126\1\0"+
    "\2\126\13\0\4\126\10\0\1\132\1\126\1\132\22\126"+
    "\1\151\1\126\1\132\13\0\4\126\10\0\2\126\1\155"+
    "\6\126\1\155\13\126\1\0\2\126\13\0\4\126\10\0"+
    "\2\126\1\175\1\126\1\175\20\126\1\0\2\126\13\0"+
    "\4\126\6\0\43\124\1\211\13\124\47\0\2\212\10\0"+
    "\25\213\1\0\2\213\13\0\4\213\10\0\2\213\1\214"+
    "\1\213\1\214\20\213\1\0\2\213\13\0\4\213\10\0"+
    "\1\215\1\213\1\216\1\213\1\214\2\213\1\217\2\213"+
    "\1\220\7\213\1\221\2\213\1\0\1\213\1\215\13\0"+
    "\4\213\10\0\1\215\1\213\1\222\4\213\1\217\2\213"+
    "\1\220\7\213\1\221\2\213\1\0\1\213\1\215\13\0"+
    "\4\213\10\0\2\213\1\223\2\213\1\223\17\213\1\0"+
    "\2\213\13\0\4\213\10\0\2\213\2\224\21\213\1\0"+
    "\2\213\13\0\4\213\10\0\1\215\1\225\1\226\1\227"+
    "\1\230\1\223\1\231\1\217\1\232\1\233\1\234\2\213"+
    "\1\235\1\213\1\236\2\213\1\221\2\213\1\237\1\213"+
    "\1\215\13\0\4\213\10\0\1\215\1\213\1\240\1\213"+
    "\1\214\1\213\1\241\1\217\2\213\1\220\7\213\1\221"+
    "\2\213\1\237\1\213\1\215\13\0\4\213\10\0\2\213"+
    "\1\242\5\213\1\243\1\244\13\213\1\0\2\213\13\0"+
    "\4\213\10\0\2\213\1\245\1\213\1\246\5\213\1\247"+
    "\12\213\1\0\2\213\13\0\4\213\10\0\2\213\1\235"+
    "\12\213\1\235\7\213\1\0\2\213\13\0\4\213\10\0"+
    "\2\213\1\250\1\251\4\213\1\252\6\213\1\236\5\213"+
    "\1\0\2\213\13\0\4\213\10\0\2\213\2\253\4\213"+
    "\1\254\14\213\1\0\2\213\13\0\4\213\10\0\2\213"+
    "\1\255\3\213\1\255\16\213\1\0\2\213\13\0\4\213"+
    "\10\0\2\213\1\256\3\213\1\256\16\213\1\0\2\213"+
    "\13\0\4\213\10\0\2\213\1\257\3\213\1\260\2\213"+
    "\1\261\13\213\1\0\2\213\13\0\4\213\10\0\1\213"+
    "\2\225\22\213\1\0\2\213\13\0\4\213\12\0\1\262"+
    "\3\0\1\262\50\0\2\213\1\247\7\213\1\247\12\213"+
    "\1\0\2\213\13\0\4\213\10\0\1\215\1\213\1\263"+
    "\3\213\1\241\1\217\1\213\1\261\1\220\4\213\1\236"+
    "\2\213\1\221\2\213\1\0\1\213\1\215\13\0\4\213"+
    "\10\0\1\215\1\213\1\264\3\213\1\241\1\217\2\213"+
    "\1\220\7\213\1\221\2\213\1\0\1\213\1\215\13\0"+
    "\4\213\10\0\2\213\1\236\14\213\1\236\5\213\1\0"+
    "\2\213\13\0\4\213\10\0\2\213\1\261\6\213\1\261"+
    "\13\213\1\0\2\213\13\0\4\213\10\0\2\213\1\260"+
    "\3\213\1\260\16\213\1\237\2\213\13\0\4\213\10\0"+
    "\25\213\1\237\2\213\13\0\4\213\10\0\2\213\1\260"+
    "\3\213\1\260\16\213\1\0\2\213\13\0\4\213\10\0"+
    "\2\213\1\265\1\224\1\246\20\213\1\0\2\213\13\0"+
    "\4\213\10\0\2\213\1\246\1\213\1\246\20\213\1\0"+
    "\2\213\13\0\4\213\10\0\1\213\1\225\1\266\2\213"+
    "\1\223\1\256\1\213\1\252\14\213\1\0\2\213\13\0"+
    "\4\213\10\0\2\213\1\252\5\213\1\252\14\213\1\0"+
    "\2\213\13\0\4\213\10\0\2\213\1\267\1\251\4\213"+
    "\1\243\14\213\1\0\2\213\13\0\4\213\10\0\2\213"+
    "\1\243\5\213\1\243\14\213\1\0\2\213\13\0\4\213"+
    "\10\0\2\213\2\251\21\213\1\0\2\213\13\0\4\213"+
    "\10\0\2\213\1\270\6\213\1\244\3\213\1\235\7\213"+
    "\1\0\2\213\13\0\4\213\10\0\2\213\1\244\6\213"+
    "\1\244\13\213\1\0\2\213\13\0\4\213\10\0\2\213"+
    "\2\253\21\213\1\0\2\213\13\0\4\213\10\0\2\213"+
    "\1\254\5\213\1\254\14\213\1\0\2\213\13\0\4\213"+
    "\10\0\2\213\1\271\1\213\1\246\10\213\1\235\7\213"+
    "\1\0\2\213\13\0\4\213\10\0\2\213\1\272\3\213"+
    "\1\255\1\213\1\243\14\213\1\0\2\213\13\0\4\213"+
    "\10\0\1\213\1\225\1\273\3\213\1\241\16\213\1\0"+
    "\2\213\13\0\4\213\10\0\2\213\1\241\3\213\1\241"+
    "\16\213\1\0\2\213\13\0\4\213\10\0\2\213\1\247"+
    "\1\251\4\213\1\254\1\213\1\247\12\213\1\0\2\213"+
    "\13\0\4\213\10\0\2\213\1\274\2\213\1\223\3\213"+
    "\1\261\13\213\1\0\2\213\13\0\4\213\10\0\25\275"+
    "\1\0\2\275\13\0\4\275\10\0\2\275\1\276\2\275"+
    "\1\276\17\275\1\0\2\275\13\0\4\275\10\0\1\275"+
    "\2\277\22\275\1\0\2\275\13\0\4\275\10\0\1\275"+
    "\1\277\1\300\2\275\1\301\2\275\1\302\1\303\3\275"+
    "\1\304\7\275\1\0\2\275\13\0\4\275\10\0\2\275"+
    "\1\305\5\275\1\302\4\275\1\304\7\275\1\0\2\275"+
    "\13\0\4\275\10\0\2\275\1\306\2\275\1\307\3\275"+
    "\1\303\13\275\1\0\2\275\13\0\4\275\10\0\2\275"+
    "\1\310\2\275\1\310\17\275\1\0\2\275\13\0\4\275"+
    "\10\0\1\275\1\277\1\311\2\275\1\312\2\275\1\302"+
    "\1\303\3\275\1\304\7\275\1\0\2\275\13\0\4\275"+
    "\10\0\2\275\2\313\21\275\1\0\2\275\13\0\4\275"+
    "\10\0\2\275\1\314\1\275\1\314\20\275\1\0\2\275"+
    "\13\0\4\275\10\0\2\275\2\315\21\275\1\0\2\275"+
    "\13\0\4\275\10\0\1\275\1\277\1\316\1\317\1\314"+
    "\1\320\2\275\1\321\1\322\3\275\1\304\7\275\1\0"+
    "\2\275\13\0\4\275\10\0\2\275\1\323\2\275\1\276"+
    "\3\275\1\324\13\275\1\0\2\275\13\0\4\275\10\0"+
    "\2\275\2\325\21\275\1\0\2\275\13\0\4\275\10\0"+
    "\2\275\1\326\2\275\1\326\17\275\1\0\2\275\13\0"+
    "\4\275\10\0\2\275\1\327\1\330\4\275\1\331\14\275"+
    "\1\0\2\275\13\0\4\275\10\0\2\275\1\332\5\275"+
    "\1\332\14\275\1\0\2\275\13\0\4\275\12\0\1\333"+
    "\4\0\1\333\47\0\2\275\1\334\2\275\1\326\2\275"+
    "\1\331\14\275\1\0\2\275\13\0\4\275\10\0\2\275"+
    "\1\331\5\275\1\331\14\275\1\0\2\275\13\0\4\275"+
    "\10\0\2\275\1\324\6\275\1\324\13\275\1\0\2\275"+
    "\13\0\4\275\10\0\2\275\2\335\21\275\1\0\2\275"+
    "\13\0\4\275\10\0\2\275\2\336\21\275\1\0\2\275"+
    "\13\0\4\275\10\0\2\275\2\330\21\275\1\0\2\275"+
    "\13\0\4\275\12\0\1\337\14\0\1\337\37\0\1\275"+
    "\1\277\1\340\1\330\1\275\1\312\2\275\1\341\1\303"+
    "\3\275\1\304\7\275\1\0\2\275\13\0\4\275\10\0"+
    "\2\275\1\342\1\275\1\314\4\275\1\324\13\275\1\0"+
    "\2\275\13\0\4\275\10\0\2\275\2\343\21\275\1\0"+
    "\2\275\13\0\4\275\10\0\2\275\1\344\1\335\1\275"+
    "\1\326\17\275\1\0\2\275\13\0\4\275\10\0\2\275"+
    "\2\345\21\275\1\0\2\275\13\0\4\275\10\0\25\346"+
    "\1\0\2\346\13\0\4\346\10\0\2\346\1\347\3\346"+
    "\1\347\16\346\1\0\2\346\13\0\4\346\10\0\2\346"+
    "\2\350\21\346\1\0\2\346\13\0\4\346\10\0\2\346"+
    "\1\351\1\350\2\346\1\352\1\346\1\353\1\354\11\346"+
    "\1\355\1\346\1\0\2\346\13\0\4\346\10\0\2\346"+
    "\1\356\3\346\1\347\2\346\1\354\13\346\1\0\2\346"+
    "\13\0\4\346\10\0\2\346\1\357\3\346\1\357\16\346"+
    "\1\0\2\346\13\0\4\346\10\0\2\346\1\355\20\346"+
    "\1\355\1\346\1\0\2\346\13\0\4\346\10\0\2\346"+
    "\1\353\5\346\1\353\14\346\1\0\2\346\13\0\4\346"+
    "\10\0\2\346\1\360\3\346\1\357\1\346\1\353\14\346"+
    "\1\0\2\346\13\0\4\346\10\0\2\346\1\354\6\346"+
    "\1\354\13\346\1\0\2\346\13\0\4\346\10\0\2\346"+
    "\1\361\1\350\2\346\1\357\1\346\1\353\1\354\11\346"+
    "\1\355\1\346\1\0\2\346\13\0\4\346\10\0\2\346"+
    "\1\362\2\346\1\362\17\346\1\0\2\346\13\0\4\346"+
    "\10\0\2\346\1\363\1\350\1\364\1\362\1\352\1\346"+
    "\1\353\1\354\1\365\1\366\1\346\1\367\5\346\1\355"+
    "\1\346\1\0\2\346\13\0\4\346\10\0\2\346\1\370"+
    "\1\346\1\364\1\362\4\346\1\371\12\346\1\0\2\346"+
    "\13\0\4\346\10\0\2\346\1\372\3\346\1\347\2\346"+
    "\1\354\1\346\1\366\11\346\1\0\2\346\13\0\4\346"+
    "\10\0\2\346\1\373\3\346\1\357\6\346\1\367\7\346"+
    "\1\0\2\346\13\0\4\346\10\0\2\346\1\374\7\346"+
    "\1\375\10\346\1\355\1\346\1\0\2\346\13\0\4\346"+
    "\10\0\2\346\1\376\3\346\1\347\3\346\1\375\12\346"+
    "\1\0\2\346\13\0\4\346\10\0\2\346\1\375\7\346"+
    "\1\375\12\346\1\0\2\346\13\0\4\346\10\0\2\346"+
    "\1\364\1\346\1\364\20\346\1\0\2\346\13\0\4\346"+
    "\10\0\2\346\1\366\10\346\1\366\11\346\1\0\2\346"+
    "\13\0\4\346\10\0\2\346\1\371\7\346\1\371\12\346"+
    "\1\0\2\346\13\0\4\346\10\0\2\346\1\367\12\346"+
    "\1\367\7\346\1\0\2\346\13\0\4\346\12\0\1\377"+
    "\12\0\1\377\43\0\1\u0100\5\0\1\u0100\46\0\2\346"+
    "\1\u0101\1\350\2\346\1\357\1\346\1\353\1\354\1\371"+
    "\2\346\1\367\5\346\1\355\1\346\1\0\2\346\13\0"+
    "\4\346\10\0\2\346\1\u0102\1\346\1\364\6\346\1\366"+
    "\11\346\1\0\2\346\13\0\4\346\10\0\2\346\1\u0103"+
    "\2\346\1\362\4\346\1\371\12\346\1\0\2\346\13\0"+
    "\4\346\10\0\25\u0104\1\0\2\u0104\13\0\4\u0104\10\0"+
    "\2\u0104\2\u0105\21\u0104\1\0\2\u0104\13\0\4\u0104\10\0"+
    "\2\u0104\1\u0106\1\u0104\1\u0106\20\u0104\1\0\2\u0104\13\0"+
    "\4\u0104\10\0\1\u0104\1\u0107\1\u0108\1\u0109\1\u010a\10\u0104"+
    "\1\u010b\7\u0104\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104"+
    "\1\u010c\1\u0105\1\u010d\20\u0104\1\0\2\u0104\13\0\4\u0104"+
    "\10\0\2\u0104\1\u010b\12\u0104\1\u010b\7\u0104\1\0\2\u0104"+
    "\13\0\4\u0104\10\0\2\u0104\2\u010e\21\u0104\1\0\2\u0104"+
    "\13\0\4\u0104\10\0\1\u0104\2\u0107\22\u0104\1\0\2\u0104"+
    "\13\0\4\u0104\10\0\2\u0104\2\u0109\21\u0104\1\0\2\u0104"+
    "\13\0\4\u0104\10\0\2\u0104\1\u010d\1\u0104\1\u010d\20\u0104"+
    "\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104\1\u010f\1\u0104"+
    "\1\u010d\10\u0104\1\u010b\7\u0104\1\0\2\u0104\13\0\4\u0104"+
    "\10\0\1\u0104\1\u0107\1\u0110\1\u010e\1\u010a\10\u0104\1\u010b"+
    "\7\u0104\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104\1\u0111"+
    "\5\u0104\1\u0111\14\u0104\1\0\2\u0104\13\0\4\u0104\10\0"+
    "\1\u0104\1\u0107\1\u0112\1\u0109\1\u010a\1\u0113\1\u0114\1\u0104"+
    "\1\u0111\1\u0115\1\u0116\2\u0104\1\u010b\7\u0104\1\0\2\u0104"+
    "\13\0\4\u0104\10\0\2\u0104\1\u0115\6\u0104\1\u0115\13\u0104"+
    "\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104\1\u0117\2\u0104"+
    "\1\u0118\1\u0114\16\u0104\1\0\2\u0104\13\0\4\u0104\10\0"+
    "\2\u0104\1\u0119\2\u0104\1\u0119\17\u0104\1\0\2\u0104\13\0"+
    "\4\u0104\10\0\2\u0104\1\u0116\7\u0104\1\u0116\12\u0104\1\0"+
    "\2\u0104\13\0\4\u0104\10\0\2\u0104\1\u011a\2\u0104\1\u0118"+
    "\2\u0104\1\u0111\1\u0115\13\u0104\1\0\2\u0104\13\0\4\u0104"+
    "\10\0\2\u0104\1\u0118\2\u0104\1\u0118\17\u0104\1\0\2\u0104"+
    "\13\0\4\u0104\10\0\2\u0104\1\u011b\1\u0109\1\u0104\1\u0119"+
    "\17\u0104\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104\1\u011c"+
    "\1\u0104\1\u010d\5\u0104\1\u0116\12\u0104\1\0\2\u0104\13\0"+
    "\4\u0104\10\0\1\u0104\1\u0107\1\u011d\3\u0104\1\u0114\16\u0104"+
    "\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104\1\u0114\3\u0104"+
    "\1\u0114\16\u0104\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104"+
    "\2\u0105\2\u0104\1\u0114\16\u0104\1\0\2\u0104\13\0\4\u0104"+
    "\12\0\1\u011e\7\0\1\u011e\46\0\1\u011f\3\0\1\u011f"+
    "\50\0\1\u0104\1\u0107\1\u0120\1\u010e\1\u010a\1\u0118\4\u0104"+
    "\1\u0116\2\u0104\1\u010b\7\u0104\1\0\2\u0104\13\0\4\u0104"+
    "\10\0\2\u0104\1\u0121\2\u0104\1\u0119\3\u0104\1\u0115\13\u0104"+
    "\1\0\2\u0104\13\0\4\u0104\10\0\2\u0104\1\u0122\2\u0104"+
    "\1\u0118\2\u0104\1\u0111\14\u0104\1\0\2\u0104\13\0\4\u0104"+
    "\10\0\25\u0123\1\0\2\u0123\13\0\4\u0123\10\0\2\u0123"+
    "\1\u0124\2\u0123\1\u0124\17\u0123\1\0\2\u0123\13\0\4\u0123"+
    "\10\0\2\u0123\2\u0125\21\u0123\1\0\2\u0123\13\0\4\u0123"+
    "\10\0\2\u0123\1\u0126\1\u0125\1\u0123\1\u0124\3\u0123\1\u0127"+
    "\5\u0123\1\u0128\5\u0123\1\0\2\u0123\13\0\4\u0123\10\0"+
    "\2\u0123\1\u0128\14\u0123\1\u0128\5\u0123\1\0\2\u0123\13\0"+
    "\4\u0123\10\0\2\u0123\1\u0129\2\u0123\1\u0124\3\u0123\1\u0127"+
    "\13\u0123\1\0\2\u0123\13\0\4\u0123\10\0\2\u0123\1\u0127"+
    "\6\u0123\1\u0127\13\u0123\1\0\2\u0123\13\0\4\u0123\10\0"+
    "\2\u0123\1\u012a\1\u0125\1\u0123\1\u0124\1\u012b\1\u0123\1\u012c"+
    "\1\u0127\1\u012d\4\u0123\1\u0128\5\u0123\1\0\2\u0123\13\0"+
    "\4\u0123\10\0\2\u0123\1\u012e\3\u0123\1\u012b\1\u0123\1\u012c"+
    "\14\u0123\1\0\2\u0123\13\0\4\u0123\10\0\2\u0123\1\u012d"+
    "\7\u0123\1\u012d\12\u0123\1\0\2\u0123\13\0\4\u0123\10\0"+
    "\2\u0123\1\u012b\3\u0123\1\u012b\16\u0123\1\0\2\u0123\13\0"+
    "\4\u0123\10\0\2\u0123\1\u012c\5\u0123\1\u012c\14\u0123\1\0"+
    "\2\u0123\13\0\4\u0123\10\0\2\u0123\1\u012f\3\u0123\1\u012b"+
    "\3\u0123\1\u012d\12\u0123\1\0\2\u0123\13\0\4\u0123\10\0"+
    "\2\u0123\1\u0130\5\u0123\1\u012c\6\u0123\1\u0128\5\u0123\1\0"+
    "\2\u0123\13\0\4\u0123\12\0\1\u0131\3\0\1\u0131\75\0"+
    "\1\u0132\31\0\2\u0123\1\u0133\1\u0125\1\u0123\1\u0124\1\u012b"+
    "\2\u0123\1\u0127\5\u0123\1\u0128\5\u0123\1\0\2\u0123\13\0"+
    "\4\u0123\10\0\2\u0123\1\u012c\5\u0123\1\u012c\1\u0123\1\u012d"+
    "\12\u0123\1\0\2\u0123\13\0\4\u0123\10\0\25\u0134\1\0"+
    "\2\u0134\13\0\4\u0134\10\0\2\u0134\1\u0135\3\u0134\1\u0135"+
    "\16\u0134\1\0\2\u0134\13\0\4\u0134\10\0\2\u0134\1\u0136"+
    "\3\u0134\1\u0135\1\u0134\1\u0137\1\u0134\1\u0138\12\u0134\1\0"+
    "\2\u0134\13\0\4\u0134\10\0\2\u0134\1\u0138\7\u0134\1\u0138"+
    "\12\u0134\1\0\2\u0134\13\0\4\u0134\10\0\2\u0134\1\u0137"+
    "\5\u0134\1\u0137\14\u0134\1\0\2\u0134\13\0\4\u0134\10\0"+
    "\2\u0134\1\u0139\3\u0134\1\u0135\3\u0134\1\u0138\12\u0134\1\0"+
    "\2\u0134\13\0\4\u0134\10\0\2\u0134\1\u013a\1\u013b\2\u0134"+
    "\1\u0135\1\u0134\1\u0137\1\u0134\1\u0138\12\u0134\1\0\2\u0134"+
    "\13\0\4\u0134\10\0\2\u0134\2\u013b\21\u0134\1\0\2\u0134"+
    "\13\0\4\u0134\12\0\1\u013c\17\0\1\u013c\34\0\25\u013d"+
    "\1\0\2\u013d\13\0\4\u013d\10\0\2\u013d\2\u013e\21\u013d"+
    "\1\0\2\u013d\13\0\4\u013d\10\0\2\u013d\1\u013f\1\u013e"+
    "\2\u013d\1\u0140\6\u013d\1\u0141\7\u013d\1\0\2\u013d\13\0"+
    "\4\u013d\10\0\2\u013d\1\u0141\12\u013d\1\u0141\7\u013d\1\0"+
    "\2\u013d\13\0\4\u013d\10\0\2\u013d\1\u0140\3\u013d\1\u0140"+
    "\16\u013d\1\0\2\u013d\13\0\4\u013d\10\0\2\u013d\2\u013e"+
    "\2\u013d\1\u0140\16\u013d\1\0\2\u013d\13\0\4\u013d\12\0"+
    "\1\u0142\3\0\1\u0142\52\0\1\u0143\7\0\1\u0143\46\0"+
    "\1\u0144\15\0\1\u0144\40\0\1\u0145\3\0\1\u0145\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10857];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\17\1\1\11\2\1\2\11\3\1\4\11"+
    "\4\1\3\11\1\0\1\11\53\1\2\11\2\0\23\1"+
    "\1\0\37\1\1\11\25\1\1\0\22\1\1\0\50\1"+
    "\1\0\3\1\1\0\37\1\2\0\35\1\2\0\21\1"+
    "\1\11\1\0\11\1\1\0\2\11\1\1\1\11\1\1"+
    "\1\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

    AnalizadorLexico(StringReader stringReader) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

  /* user code: */
/*-*
* funciones y variables
*/
private void imprimir(String descripcion, String lexema) {
AnalizadorLexicoPseInt.Anadir(descripcion, lexema);
System.out.println(lexema + " - " + descripcion);
}

private void mandar_error(String texto, String lexema,String linea, String colum) {
AnalizadorLexicoPseInt.MostrarError(texto, lexema,linea,colum);

}






  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return ;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { mandar_error("Caracter invalido",yytext(),""+yyline,""+yycolumn);
            }
          case 55: break;
          case 2: 
            { imprimir("Identificador",yytext());
            }
          case 56: break;
          case 3: 
            { imprimir("Booleano",yytext());
            }
          case 57: break;
          case 4: 
            { imprimir("Blanco",yytext());
            }
          case 58: break;
          case 5: 
            { imprimir("Inicio dimension",yytext());
            }
          case 59: break;
          case 6: 
            { imprimir("Fin Dimension",yytext());
            }
          case 60: break;
          case 7: 
            { imprimir("Operador algebraico",yytext());
            }
          case 61: break;
          case 8: 
            { imprimir("Operador de relacion",yytext());
            }
          case 62: break;
          case 9: 
            { imprimir("Parentesis",yytext());
            }
          case 63: break;
          case 10: 
            { imprimir("Fin de instruccion",yytext());
            }
          case 64: break;
          case 11: 
            { imprimir("Coma",yytext());
            }
          case 65: break;
          case 12: 
            { imprimir("Descripcion bloque",yytext());
            }
          case 66: break;
          case 13: 
            { imprimir("Entero",yytext());
            }
          case 67: break;
          case 14: 
            { imprimir("Operador Logico",yytext());
            }
          case 68: break;
          case 15: 
            { imprimir("Cadena",yytext());
            }
          case 69: break;
          case 16: 
            { imprimir("Funcion Rc",yytext());
            }
          case 70: break;
          case 17: 
            { imprimir("Funcion Logaritmo",yytext());
            }
          case 71: break;
          case 18: 
            { imprimir("Control SI",yytext());
            }
          case 72: break;
          case 19: 
            { imprimir("Comentario",yytext());
            }
          case 73: break;
          case 20: 
            { imprimir("Operador asignacion",yytext());
            }
          case 74: break;
          case 21: 
            { imprimir("Funcion exponencial",yytext());
            }
          case 75: break;
          case 22: 
            { imprimir("Funcion Seno",yytext());
            }
          case 76: break;
          case 23: 
            { imprimir("Funcion Absoluto",yytext());
            }
          case 77: break;
          case 24: 
            { imprimir("Funcion Coseno",yytext());
            }
          case 78: break;
          case 25: 
            { imprimir("Funcion tangente",yytext());
            }
          case 79: break;
          case 26: 
            { imprimir("Caracter",yytext());
            }
          case 80: break;
          case 27: 
            { imprimir("Decimal",yytext());
            }
          case 81: break;
          case 28: 
            { imprimir("Funcion Coseno inverso",yytext());
            }
          case 82: break;
          case 29: 
            { imprimir("Funcion Seno inverso",yytext());
            }
          case 83: break;
          case 30: 
            { imprimir("Comando Como",yytext());
            }
          case 84: break;
          case 31: 
            { imprimir("Funcion Azar",yytext());
            }
          case 85: break;
          case 32: 
            { imprimir("Loop PARA",yytext());
            }
          case 86: break;
          case 33: 
            { imprimir("Control Sino",yytext());
            }
          case 87: break;
          case 34: 
            { imprimir("Funcion Leer",yytext());
            }
          case 88: break;
          case 35: 
            { imprimir("Funcion Tangente inversa",yytext());
            }
          case 89: break;
          case 36: 
            { imprimir("Fin Control SI",yytext());
            }
          case 90: break;
          case 37: 
            { imprimir("Funcion Trunc",yytext());
            }
          case 91: break;
          case 38: 
            { imprimir("Control Segun",yytext());
            }
          case 92: break;
          case 39: 
            { imprimir("Funcion Redondear",yytext());
            }
          case 93: break;
          case 40: 
            { imprimir("Control hacer",yytext());
            }
          case 94: break;
          case 41: 
            { imprimir("Funcion",yytext());
            }
          case 95: break;
          case 42: 
            { imprimir("Fin Loop",yytext());
            }
          case 96: break;
          case 43: 
            { imprimir("Definir tipo de datos",yytext());
            }
          case 97: break;
          case 44: 
            { imprimir("InicioProceso",yytext());
            }
          case 98: break;
          case 45: 
            { imprimir("Condicional Mientras",yytext());
            }
          case 99: break;
          case 46: 
            { imprimir("Fin Control Segun",yytext());
            }
          case 100: break;
          case 47: 
            { imprimir("Escribir",yytext());
            }
          case 101: break;
          case 48: 
            { imprimir("Control Entonces",yytext());
            }
          case 102: break;
          case 49: 
            { imprimir("Paso de loop",yytext());
            }
          case 103: break;
          case 50: 
            { imprimir("Arreglo",yytext());
            }
          case 104: break;
          case 51: 
            { imprimir("FinFuncion",yytext());
            }
          case 105: break;
          case 52: 
            { imprimir("FinProceso",yytext());
            }
          case 106: break;
          case 53: 
            { imprimir("Fin Mientras",yytext());
            }
          case 107: break;
          case 54: 
            { imprimir("Control default",yytext());
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
